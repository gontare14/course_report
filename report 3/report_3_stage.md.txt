<hr>
<h2 id="front-matter">Front matter</h2>
<p>title: &quot;Отчет о прохождении 3 этапа внешних курсов&quot;
subtitle: &quot;Продвинутые темы&quot;
author: &quot;Гонтарь Полина Евгеньевна, НБИбд-01-24&quot;</p>
<h2 id="generic-otions">Generic otions</h2>
<p>lang: ru-RU
toc-title: &quot;Содержание&quot;</p>
<h2 id="bibliography">Bibliography</h2>
<p>bibliography: bib/cite.bib
csl: pandoc/csl/gost-r-7-0-5-2008-numeric.csl</p>
<h2 id="pdf-output-format">Pdf output format</h2>
<h2 id="toc-true--table-of-contents-toc-depth-2-lof-true--list-of-figures-lot-true--list-of-tables-fontsize-12pt-linestretch-15-papersize-a4-documentclass-scrreprt--i18n-polyglossia-polyglossia-lang---name-russian---options-------spellingmodern-------babelshorthandstrue-polyglossia-otherlangs---name-english--i18n-babel-babel-lang-russian-babel-otherlangs-english--fonts-mainfont-pt-serif-romanfont-pt-serif-sansfont-pt-sans-monofont-pt-mono-mainfontoptions-ligaturestex-romanfontoptions-ligaturestex-sansfontoptions-ligaturestexscalematchlowercase-monofontoptions-scalematchlowercasescale09--biblatex-biblatex-true-biblio-style-gost-numeric-biblatexoptions-----parentrackertrue-----backendbiber-----hyperrefauto-----languageauto-----autolangother-----citestylegost-numeric--pandoc-crossref-latex-customization-figuretitle-рис-tabletitle-таблица-listingtitle-листинг-loftitle-список-иллюстраций-lottitle-список-таблиц-loltitle-листинги--misc-options-indent-true-header-includes-----usepackageindentfirst-----usepackagefloat--keep-figures-where-there-are-in-the-text-----floatplacementfigureh--keep-figures-where-there-are-in-the-text">toc: true # Table of contents
toc-depth: 2
lof: true # List of figures
lot: true # List of tables
fontsize: 12pt
linestretch: 1.5
papersize: a4
documentclass: scrreprt
## I18n polyglossia
polyglossia-lang:
  name: russian
  options:
    - spelling=modern
    - babelshorthands=true
polyglossia-otherlangs:
  name: english
## I18n babel
babel-lang: russian
babel-otherlangs: english
## Fonts
mainfont: PT Serif
romanfont: PT Serif
sansfont: PT Sans
monofont: PT Mono
mainfontoptions: Ligatures=TeX
romanfontoptions: Ligatures=TeX
sansfontoptions: Ligatures=TeX,Scale=MatchLowercase
monofontoptions: Scale=MatchLowercase,Scale=0.9
## Biblatex
biblatex: true
biblio-style: &quot;gost-numeric&quot;
biblatexoptions:
  - parentracker=true
  - backend=biber
  - hyperref=auto
  - language=auto
  - autolang=other*
  - citestyle=gost-numeric
## Pandoc-crossref LaTeX customization
figureTitle: &quot;Рис.&quot;
tableTitle: &quot;Таблица&quot;
listingTitle: &quot;Листинг&quot;
lofTitle: &quot;Список иллюстраций&quot;
lotTitle: &quot;Список таблиц&quot;
lolTitle: &quot;Листинги&quot;
## Misc options
indent: true
header-includes:
  - \usepackage{indentfirst}
  - \usepackage{float} # keep figures where there are in the text
  - \floatplacement{figure}{H} # keep figures where there are in the text</h2>
<h1 id="цель-работы">Цель работы</h1>
<p>Ознакомиться с функционалом операционной системы Linux.</p>
<h1 id="задание">Задание</h1>
<p>Просмотреть видео и на основе полученной информации пройти тестовые задания.</p>
<h1 id="теоретическое-введение">Теоретическое введение</h1>
<p>Линукс - в части случаев GNU/Linux — семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Как и ядро Linux, системы на его основе, как правило, создаются и распространяются в соответствии с моделью разработки свободного и открытого программного обеспечения. Linux-системы распространяются в основном бесплатно в виде различных дистрибутивов — в форме, готовой для установки и удобной для сопровождения и обновлений, — и имеющих свой набор системных и прикладных компонентов, как свободных, так и проприетарных. </p>
<h1 id="выполнение-лабораторной-работы">Выполнение лабораторной работы</h1>
<p>3 Этап: (рис. @fig:001, @fig:002, @fig:003, @fig:004, @fig:005, @fig:006, @fig:007, @fig:008, @fig:009, @fig:010, @fig:011, @fig:012, @fig:013, @fig:014, @fig:015, @fig:016, @fig:017, @fig:018, @fig:019, @fig:020, @fig:021, @fig:022, @fig:023, @fig:024, @fig:025, @fig:026, @fig:027, @fig:028, @fig:029, @fig:030, @fig:031, @fig:032, @fig:033, @fig:034, @fig:035, @fig:036, @fig:037, @fig:038, @fig:039, @fig:040, @fig:041).</p>
<p><img src="image/1.png" alt="Задание 1">{#fig:001 width=70%}</p>
<p>Стоит упомянуть, что у редактора vim есть туториал, который позволяет разобраться с командами, необходимыми для стандартной работы. 
За выход из редактора отвечают следующие команды:</p>
<ul>
<li>ZQ - выйти без сохранения</li>
<li>:q! - выйти без сохранения</li>
<li>ZZ - записать файл и выйти (если файл не изменяли, то записываться он не будет)</li>
<li>:wq - записать файл и выйти</li>
<li>:x - записать файл и выйти</li>
<li>:w<CR> - записать файл</li>
<li>:sav filename<CR> - &quot;сохранить как&quot;</li>
<li>:w filename<CR> - &quot;сохранить как&quot;</li>
<li>:w!<CR> - записать файл</li>
</ul>
<p>Как мы видим, вариантов много, при этом каждый сможет найти тот, который подойдёт под конкретную ситуацию.</p>
<p><img src="image/2.png" alt="Задание 2">{#fig:002 width=70%}</p>
<p><code>Strange_  TEXT  is_here. 2=2 YES!</code></p>
<p>Точка считается &quot;маленьким словом&quot;, так что всего их 9:
<code>Strange_</code>, <code>is_here</code>, <code>.</code>, <code>2</code>, <code>=</code>, <code>2</code>, <code>!</code> и <code>два лишних пробела</code>.</p>
<p>И если посчитать нажатия на w и на W, то действительно после 10 штук попадем в одно место. 10 нажатий на W, это то же самое, что и 10 нажатий на w,</p>
<p><img src="image/3.png" alt="Задание 3">{#fig:003 width=70%}</p>
<p><code>d2wwifour four &lt;&lt;Esc&gt;&gt;</code></p>
<p><code>d2wwywPp</code></p>
<p><code>d2w$$bifour four &lt;&lt;Esc&gt;&gt;</code></p>
<ul>
<li>$ — в конец текущей строки;</li>
<li>w — на слово вправо;</li>
<li>b — на слово влево;</li>
<li>i — начать ввод перед курсором;</li>
<li>p — вставка содержимого неименнованного буфера под курсором;</li>
<li>P — вставка содержимого неименованного буфера перед курсором;</li>
<li>yy (также Y) — копирование текущей строки в неименованный буфер;</li>
<li>y&lt;число&gt;y — копирование числа строк начиная с текущей в неименованный буфер;</li>
</ul>
<p><img src="image/4.png" alt="Задание 4">{#fig:004 width=70%}</p>
<p>Поиск и замена в редакторе работают по следующей схеме:</p>
<p><code>:{пределы}s/{что заменяем}/{на что заменяем}/{опции}</code></p>
<p>Для замены во всем файле можно использовать символ %.</p>
<p><img src="image/5.png" alt="Задание 5">{#fig:005 width=70%}</p>
<p>Команда $ — в конец текущей строки, W - до пробела вправо - то есть, перемещение.</p>
<p>Нажать Esc достаточно один раз, но да ладно.</p>
<p>Надпись visual - горит.</p>
<p>d — используется совместно с командами перемещения. Удаляет символы с текущего положения курсора до положения после ввода команды перемещения.</p>
<p>yy (также Y) — копирование текущей строки в буфер;</p>
<p><img src="image/6.png" alt="Задание 6">{#fig:006 width=70%}</p>
<p>Только из набора С потому что у каждой оболочки свой буфер, который при выходе из нее буде записываться в файл истории.</p>
<p><img src="image/7.png" alt="Задание 7">{#fig:007 width=70%}</p>
<p><code>/home/bi/file1.txt</code> - потому что именно в этой директории мы создаем новый файл, а уже после его создания мы переходим в другую папку.</p>
<p><img src="image/8.png" alt="Задание 8">{#fig:008 width=70%}</p>
<p>Имя не может начинаться с цифры, содержать специальные символы или пробелы.</p>
<p><img src="image/9.png" alt="Задание 9">{#fig:009 width=70%}</p>
<p><code>$ echo опции строка</code>
Эта команда печатает строки, которые передаются в качестве аргументов в стандартный вывод и обычно используется в сценариях оболочки для отображения сообщения или вывода результатов других команд.</p>
<p><code>var1=$1</code> - обозначение переменных</p>
<p><code>var2=$2</code></p>
<p><code>echo &quot;Arguments are: \$1=$var1 \$2=$var2&quot;</code> - строка печати.</p>
<p><img src="image/10.png" alt="Задание 10">{#fig:010 width=70%}</p>
<ul>
<li>$0 - имя скрипта</li>
<li>$# - вернет количество аргументов</li>
<li>-ge - больше или равно</li>
<li>-n <string> - не пустая строка.</li>
</ul>
<p>Имя скрипта - это не пустая строка.</p>
<p>$# Это число аргументов без учета имени скрипта, который всегда $0. И число аргументов всегда будет или равно нулю, или больше него, тк просто не может скатиться в отрицательную сторону.</p>
<p><img src="image/11.png" alt="Задание 11">{#fig:011 width=70%}</p>
<ul>
<li>-lt, (&lt;) - меньше</li>
<li>-gt - больше</li>
<li>-eq - равно</li>
</ul>
<p>3 не больше 5, 3 не меньше 3, 3 не равно 4.</p>
<p>5 не больше 5, 5 не меньше 3, 5 не равно 4.</p>
<p>Оба раза выведет four.</p>
<p><img src="image/11_1.png" alt="Задание 12">{#fig:012 width=70%}</p>
<ol>
<li>Задаю общую часть в каждом выводе - слово &quot;student&quot;: v=student</li>
<li>Выполняем команды для разных аргументов.</li>
<li>res - это результат для вывода</li>
<li>echo &quot;$res&quot; - вывести результат</li>
</ol>
<p><img src="image/12.png" alt="Задание 13">{#fig:013 width=70%}</p>
<ul>
<li>(Start)</li>
<li>a &gt; c нет (Finish) </li>
<li>(Start)</li>
<li>, &gt; c нет (Finish) </li>
<li>(Start)</li>
<li>b &gt; c нет (Finish) </li>
<li>(Start)</li>
<li>, &gt; c нет (Finish) </li>
<li>(Start)</li>
<li>c_d &gt; c да</li>
</ul>
<p><img src="image/13.png" alt="Задание 14">{#fig:014 width=70%}</p>
<p><img src="image/14.png" alt="Задание 14">{#fig:015 width=70%}</p>
<pre><code>child=16
adult=25
stdout=0

while [[ $stdout != 1 ]] #конструкция типа while-True
    do
        echo &quot;enter your name: &quot; #Пользователь вводит имя
        read name
    if [[ (-z $name) || ($name = 0) ]] ;then #Если имя не по параметрам, простимся
        echo &quot;bye&quot;
        stdout=1
    elif [[ -n $name ]]; then #А вот если имя нормальное
        while [[ $stdout != 1 ]] ;do 
            echo &quot;enter your age: &quot; #То пусть вводит возраст
            read age #Считываем возраст
            if [[ ($age -eq 0) || (-z $age) ]] ;then #Если возраст 0 или строка пуста - прощаемся
                echo &quot;bye&quot;
                stdout=1
            elif [[ $age -le $child ]] ;then #Если меньше или равен ребенку, то ребенок
                echo &quot;$name, your group is child&quot;
            elif [[ $age -gt $adult ]] ; then #Больше взрослого - то взрослый
                echo &quot;$name, your group is adult&quot; ;else
                if [[ ($age -ge 17) &amp;&amp; ($age -le 25) ]] ;then #Если от 17 до 25, то подросток.
                    echo &quot;$name, your group is youth&quot; ;fi
            fi ;break
        done ;fi
done
</code></pre>
<p><img src="image/15.png" alt="Задание 15">{#fig:016 width=70%}</p>
<ol>
<li><p>a = $a</p>
</li>
<li><p>a += b это то же самое, что и a = a + b, но с символами &quot;+=&quot; != &quot;=+&quot;</p>
</li>
<li><p>если выражение не в скобках, но с пробелами - работать не будет. (let a=a+b - сработает; let a = a + b - нет)</p>
</li>
</ol>
<p><img src="image/16.png" alt="Задание 16">{#fig:017 width=70%}</p>
<p>Выведет путь до директории, в которую мы перешли, так как &quot;<code>pwd</code>&quot; - это команда</p>
<p><img src="image/16_2.png" alt="Задание 16_2">{#fig:018 width=70%}</p>
<p><code>programm</code>  выполняет стандартный вывод в терминал (если это принцип работы программы). И нам нужно настроить вывод в файл.</p>
<p><img src="image/17.png" alt="Задание 17">{#fig:019 width=70%}</p>
<p>Первая переменная локальная, и это просто пустая строка, вторая переменная - это сумма арифметической прогрессии от 1 до 10, равна 55, но при умножении на 2 даст 110.</p>
<p><img src="image/18.png" alt="Задание 18">{#fig:020 width=70%}</p>
<p><img src="image/19.png" alt="Задание 18">{#fig:021 width=70%}</p>
<p>Алгоритм нахождения НОД делением</p>
<ol>
<li>Большее число делим на меньшее.</li>
<li>Если делится без остатка, то меньшее число и есть НОД (следует выйти из цикла).</li>
<li>Если есть остаток, то большее число заменяем на остаток от деления.</li>
<li>Переходим к пункту 1.</li>
</ol>
<p><img src="image/20.png" alt="Задание 19">{#fig:022 width=70%}</p>
<p><img src="image/21.png" alt="Задание 19">{#fig:023 width=70%}</p>
<p>Калькулятор выглядит обычно - мы вводим два числа, пишем, что с ними надо сделать, и потом, учитывая случаи ошибок, выводим результат.</p>
<p><img src="image/22.png" alt="Задание 20">{#fig:024 width=70%}</p>
<p>-iname ищет без учета регистра, а -name в точности как в запросе. Звездочка стоит после слова - это значит после слова может быть сколько угодно символов.</p>
<p><img src="image/23.png" alt="Задание 21">{#fig:025 width=70%}</p>
<p>find [path] [expression]</p>
<p>где: path - это путь к директории, в которой нужно выполнить поиск файлов (по умолчанию, поиск производится в текущей директории и всех ее поддиректориях);</p>
<p>expression - это выражение, которое определяет критерии поиска файлов.</p>
<p>-name: поиск файлов по имени. Например: find /home/user -name myfile.txt</p>
<p><img src="image/24.png" alt="Задание 22">{#fig:026 width=70%}</p>
<p>Текущий каталог - это depth=1, а остальное считается просто:</p>
<p>/home/bi   -&gt; depth=1</p>
<p>/home/bi/dir1   -&gt; depth=2</p>
<p>/home/bi/dir1/dir2   -&gt; depth=3</p>
<p><img src="image/25.png" alt="Задание 23">{#fig:027 width=70%}</p>
<p>Из описания man:
Print NUM lines of trailing context after/before matching lines
&quot;matching lines&quot; - множественное число, строки в которых нашлось совпадение</p>
<p>Т.е. если идут 2...10...100 строк подряд, в которых обнаружилось совпадение, контекст будет выведен до и после этой ГРУППЫ строк, а не до и после каждой строки в этой группе</p>
<p><img src="image/26.png" alt="Задание 24">{#fig:028 width=70%}</p>
<p><img src="image/26_2.png" alt="Задание 24">{#fig:029 width=70%}</p>
<p>Объяснение на втором скриншоте.</p>
<p><img src="image/27.png" alt="Задание 25">{#fig:030 width=70%}</p>
<p>The -n option disables the automatic printing, which means the lines you don&#39;t specifically tell it to print do not get printed, and lines you do explicitly tell it to print (e.g. with p) get printed only once. </p>
<p><img src="image/28.png" alt="Задание 26">{#fig:031 width=70%}</p>
<p>аббревиатура ABBA отличается от двух других аббревиатур тем, что справа он неё стоит запятая без пробела: &quot;ABBA,&quot;. </p>
<p>При этом по условию аббревиатура должна выглядеть как [ XX ] или [ XXX ] (и ещё больше X). Следовательно, для этой проверки надо добавить пробел квадратными скобками [ ] слева и, соответственно, с права.</p>
<p><img src="image/29.png" alt="Задание 27">{#fig:032 width=70%}</p>
<p>-persist lets plot windows survive after main gnuplot program exits. </p>
<p><img src="image/30.png" alt="Задание 28">{#fig:033 width=70%}</p>
<p><code>plot &#39;data.csv&#39; using 1:2</code> даст ошибку:</p>
<p><code>warning: Skipping data file with no valid points ^ x range is invalid</code></p>
<p>Скорее всего причиной такого поведения является тот факт, что формат CSV содержит строки, где столбцы разделены запятой? Содержимое файла:</p>
<pre><code>1,21
2,22
3,23
4,24
5,25
6,26
7,27
8,28
9,29
10,30
</code></pre>
<p><img src="image/31.png" alt="Задание 29">{#fig:034 width=70%}</p>
<p>Cначала идет команда установки подписей, а потом в скобках:</p>
<p>подпись - пробел - переменная с координатой - запятая</p>
<p>Повторяется это количество раз соответствующее числу переменных, и без запятой (в случае с последней переменной)</p>
<p>А подпись в свою очередь получается конкатенацией текста из задания и переменной с координатой.</p>
<p><img src="image/32.png" alt="Задание 30">{#fig:035 width=70%}</p>
<ol>
<li>График строится строкой &quot;splot x<strong>2+y</strong>2&quot;. </li>
<li>Вращение задается строкой &quot;zrot=(zrot+10)%360&quot;. Значит, смещение вперед (которое было изначально) можно также задать строкой &quot;zrot=(zrot+360+10)%360&quot; или иначе говоря &quot;zrot=(zrot+370)%360&quot;. А теперь посмотрим на наше требование - чтоб вращалось в другую сторону, значит, по аналогии, необходимо вместо перебора на 10 сделать недобор.</li>
</ol>
<p>&quot;zrot=(zrot+350)%360&quot;</p>
<ol start="3">
<li>Строка &quot;pause 0.2&quot; ставит выполнение на паузу на определенный промежуток времени. В задании сказали перерисовывать чаще, значит пауза должна быть меньше.</li>
</ol>
<p><img src="image/33.png" alt="Задание 31">{#fig:036 width=70%}</p>
<ul>
<li><p>r - чтение;</p>
</li>
<li><p>w - запись;</p>
</li>
<li><p>x - выполнение;</p>
</li>
<li><p>s - выполнение  от имени суперпользователя (дополнительный);</p>
</li>
<li><p>u - владелец файла;</p>
</li>
<li><p>g - группа файла;</p>
</li>
<li><p>o - все остальные пользователи;</p>
</li>
<li><p>0 - никаких прав;</p>
</li>
<li><p>1 - только выполнение;</p>
</li>
<li><p>2 - только запись;</p>
</li>
<li><p>3 - выполнение и запись;</p>
</li>
<li><p>4 -  только чтение;</p>
</li>
<li><p>5 - чтение и выполнение;</p>
</li>
<li><p>6 - чтение и запись;</p>
</li>
<li><p>7 - чтение запись и выполнение.</p>
</li>
</ul>
<p><img src="image/34.png" alt="Задание 32">{#fig:037 width=70%}</p>
<p>Решений два типа:</p>
<ul>
<li>Сменить права гостей, добавив W</li>
<li>Сделать владельцем нужную группу или пользователя, в зависимости от того, у кого из них уже есть права на W</li>
<li>Помнить, что root - владелец и остальные для него - others.</li>
</ul>
<p><img src="image/35.png" alt="Задание 33">{#fig:038 width=70%}</p>
<ul>
<li>wc -l <filename> вывести количество строк</li>
<li>wc -c <filename> вывести количество байт</li>
<li>wc -m <filename> вывести количество символов</li>
<li>wc -L <filename> вывести длину самой длинной строки</li>
<li>wc -w <filename> вывести количество слов</li>
</ul>
<p><img src="image/36.png" alt="Задание 34">{#fig:039 width=70%}</p>
<p>-h, --human-readable
    print sizes in human readable format (e.g., 1K 234M 2G)</p>
<p>-s, --summarize
    display only a total for each argument </p>
<p><img src="image/37.png" alt="Задание 35">{#fig:040 width=70%}</p>
<p>Команда создаст три директории от dir1 до dir3. </p>
<h1 id="сертификат">Сертификат</h1>
<p><img src="image/%D1%81%D0%B5%D1%80%D1%82%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%82.png" alt="Сертификат">{#fig:041 width=70%}</p>
<h1 id="выводы">Выводы</h1>
<p>Я просмотрела курс и освежила в памяти навыки работы с более сложными командами в Линукс.</p>
<h1 id="список-литературыunnumbered">Список литературы{.unnumbered}</h1>
<ol>
<li>Введение в Linux</li>
</ol>
<p>::: {#refs}
:::</p>
